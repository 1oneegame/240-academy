async function deleteOldTests() {
  console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤...\n');
  
  const testIds = [
    '68d796e1655de29c27e38fd2', // –°—Ç–∞—Ä—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç
    '68d796e1655de29c27e38fd3', // –°—Ç–∞—Ä—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç  
    '68d796e2655de29c27e38fd4'  // –°—Ç–∞—Ä—ã–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç
  ];
  
  for (const testId of testIds) {
    try {
      const response = await fetch(`http://localhost:3001/api/tests/${testId}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        console.log(`‚úÖ –¢–µ—Å—Ç ${testId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
      } else {
        const error = await response.text();
        console.log(`‚ö†Ô∏è –¢–µ—Å—Ç ${testId} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω: ${error}`);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ ${testId}:`, error.message);
    }
  }
  
  console.log('\nüéâ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

deleteOldTests();
