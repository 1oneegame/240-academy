"use client";

import { ProtectedRoute } from "@/components/protected-route";
import { useRouter } from "next/navigation";
import { useState, useEffect } from "react";
import { Course } from "@/types/course";
import { Test } from "@/types/test";
import { VideoCourse } from "@/types/video-course";

export default function AdminPanel() {
  const router = useRouter();
  const [activeTab, setActiveTab] = useState("dashboard");
  const [courses, setCourses] = useState<Course[]>([]);
  const [videoCourses, setVideoCourses] = useState<VideoCourse[]>([]);
  const [tests, setTests] = useState<Test[]>([]);
  const [stats, setStats] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [isAdmin, setIsAdmin] = useState(false);
  const [accessDenied, setAccessDenied] = useState(false);

  useEffect(() => {
    checkAdminAccess();
  }, []);

  const checkAdminAccess = async () => {
    try {
      const response = await fetch('/api/admin/check');
      const data = await response.json();
      
      if (data.isAdmin) {
        setIsAdmin(true);
        fetchData();
      } else {
        setAccessDenied(true);
      }
    } catch (error) {
      console.error('Error checking admin access:', error);
      setAccessDenied(true);
    }
  };

  const fetchData = async () => {
    try {
      setLoading(true);
      const [coursesRes, videoCoursesRes, testsRes, statsRes] = await Promise.all([
        fetch('/api/courses'),
        fetch('/api/video-courses'),
        fetch('/api/tests'),
        fetch('/api/admin/stats')
      ]);
      
      const coursesData = await coursesRes.json();
      const videoCoursesData = await videoCoursesRes.json();
      const testsData = await testsRes.json();
      const statsData = await statsRes.json();
      
      setCourses(coursesData);
      setVideoCourses(videoCoursesData);
      setTests(testsData);
      setStats(statsData);
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  const adminSections = [
    {
      id: "dashboard",
      title: "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
      description: "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
      icon: "üìä"
    },
    {
      id: "courses",
      title: "–í–∏–¥–µ–æ–∫—É—Ä—Å—ã",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∫—É—Ä—Å–∞–º–∏",
      icon: "üé•"
    },
    {
      id: "tests",
      title: "–¢–µ—Å—Ç—ã",
      description: "–°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤",
      icon: "üìù"
    },
    {
      id: "users",
      title: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
      description: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
      icon: "üë•"
    },
    {
      id: "analytics",
      title: "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
      description: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã",
      icon: "üìà"
    }
  ];

  const renderDashboard = () => (
    <div className="space-y-6">
      <h2 className="text-3xl font-bold text-blue-900">–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h2>
      {loading ? (
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-900"></div>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                <p className="text-2xl font-bold text-blue-900">{stats?.users?.total || 0}</p>
              </div>
              <div className="text-3xl">üë•</div>
            </div>
          </div>
          <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã</p>
                <p className="text-2xl font-bold text-blue-900">{stats?.courses?.published || 0}</p>
              </div>
              <div className="text-3xl">üé•</div>
            </div>
          </div>
          <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã</p>
                <p className="text-2xl font-bold text-blue-900">{stats?.tests?.published || 0}</p>
              </div>
              <div className="text-3xl">üìù</div>
            </div>
          </div>
          <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">–ó–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤</p>
                <p className="text-2xl font-bold text-blue-900">{stats?.completions || 0}</p>
              </div>
              <div className="text-3xl">üìä</div>
            </div>
          </div>
        </div>
      )}
    </div>
  );

  const handleDeleteCourse = async (courseId: string) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å?')) {
      try {
        const response = await fetch(`/api/courses/${courseId}`, {
          method: 'DELETE'
        });
        if (response.ok) {
          fetchData();
        }
      } catch (error) {
        console.error('Error deleting course:', error);
      }
    }
  };

  const handleDeleteVideoCourse = async (videoCourseId: string) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–∏–¥–µ–æ–∫—É—Ä—Å?')) {
      try {
        const response = await fetch(`/api/video-courses/${videoCourseId}`, {
          method: 'DELETE'
        });
        if (response.ok) {
          fetchData();
        }
      } catch (error) {
        console.error('Error deleting video course:', error);
      }
    }
  };

  const renderCourses = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold text-blue-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ–∫—É—Ä—Å–∞–º–∏</h2>
        <div className="flex gap-3">
          <button 
            className="bg-blue-900 text-white px-4 py-2 rounded-lg hover:bg-blue-800 transition-colors"
            onClick={() => router.push("/admin/video-courses")}
          >
            –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ–∫—É—Ä—Å
          </button>
        </div>
      </div>
      {loading ? (
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-900"></div>
        </div>
      ) : (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="space-y-4">
            {videoCourses.length === 0 ? (
              <p className="text-gray-500 text-center py-8">–í–∏–¥–µ–æ–∫—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            ) : (
              videoCourses.map((videoCourse) => (
                <div key={videoCourse._id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                  <div>
                    <h3 className="text-lg font-semibold text-blue-900">{videoCourse.title}</h3>
                    <p className="text-gray-600">{videoCourse.lessons.length} —É—Ä–æ–∫–æ–≤ ‚Ä¢ {videoCourse.category} ‚Ä¢ {videoCourse.level}</p>
                    <p className="text-sm text-gray-500">{videoCourse.isPublished ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' : '–ß–µ—Ä–Ω–æ–≤–∏–∫'}</p>
                  </div>
                  <div className="flex space-x-2">
                    <button 
                      className="bg-green-100 text-green-800 px-3 py-1 rounded hover:bg-green-200 transition-colors"
                      onClick={() => router.push(`/admin/video-courses`)}
                    >
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button 
                      className="bg-red-100 text-red-800 px-3 py-1 rounded hover:bg-red-200 transition-colors"
                      onClick={() => handleDeleteVideoCourse(videoCourse._id!)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      )}
    </div>
  );

  const handleDeleteTest = async (testId: string) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç?')) {
      try {
        const response = await fetch(`/api/tests/${testId}`, {
          method: 'DELETE'
        });
        if (response.ok) {
          fetchData();
        }
      } catch (error) {
        console.error('Error deleting test:', error);
      }
    }
  };

  const renderTests = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-3xl font-bold text-blue-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏</h2>
        <button 
          className="bg-blue-900 text-white px-4 py-2 rounded-lg hover:bg-blue-800 transition-colors"
          onClick={() => router.push("/admin/tests/new")}
        >
          –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç
        </button>
      </div>
      {loading ? (
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-900"></div>
        </div>
      ) : (
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
          <div className="space-y-4">
            {tests.length === 0 ? (
              <p className="text-gray-500 text-center py-8">–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
            ) : (
              tests.map((test) => (
                <div key={test._id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                  <div>
                    <h3 className="text-lg font-semibold text-blue-900">{test.title}</h3>
                    <p className="text-gray-600">{test.questions.length} –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Ä¢ {test.timeLimit} –º–∏–Ω—É—Ç ‚Ä¢ {test.category}</p>
                    <p className="text-sm text-gray-500">{test.isPublished ? '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω' : '–ß–µ—Ä–Ω–æ–≤–∏–∫'}</p>
                  </div>
                  <div className="flex space-x-2">
                    <button 
                      className="bg-green-100 text-green-800 px-3 py-1 rounded hover:bg-green-200 transition-colors"
                      onClick={() => router.push(`/admin/tests/${test._id}/edit`)}
                    >
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button 
                      className="bg-red-100 text-red-800 px-3 py-1 rounded hover:bg-red-200 transition-colors"
                      onClick={() => handleDeleteTest(test._id!)}
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      )}
    </div>
  );

  const renderUsers = () => (
    <div className="space-y-6">
      <h2 className="text-3xl font-bold text-blue-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h2>
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="space-y-4">
          <div className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
            <div>
              <h3 className="text-lg font-semibold text-blue-900">–ê–π–∂–∞–Ω –ù—É—Ä–ª–∞–Ω–æ–≤–∞</h3>
              <p className="text-gray-600">aiyan.nur@example.com</p>
            </div>
            <div className="flex space-x-2">
              <button className="bg-blue-100 text-blue-800 px-3 py-1 rounded hover:bg-blue-200 transition-colors">
                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
              </button>
              <button className="bg-red-100 text-red-800 px-3 py-1 rounded hover:bg-red-200 transition-colors">
                –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderAnalytics = () => (
    <div className="space-y-6">
      <h2 className="text-3xl font-bold text-blue-900">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h2>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <h3 className="text-xl font-semibold text-blue-900 mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º</h3>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞</span>
              <span className="font-semibold">85% –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π</span>
            </div>
            <div className="flex justify-between">
              <span>–§–∏–∑–∏–∫–∞</span>
              <span className="font-semibold">72% –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π</span>
            </div>
          </div>
        </div>
        <div className="bg-white p-6 rounded-xl shadow-sm border border-gray-200">
          <h3 className="text-xl font-semibold text-blue-900 mb-4">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
          <div className="space-y-3">
            <div className="flex justify-between">
              <span>–°–µ–≥–æ–¥–Ω—è</span>
              <span className="font-semibold">156 –∞–∫—Ç–∏–≤–Ω—ã—Ö</span>
            </div>
            <div className="flex justify-between">
              <span>–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ</span>
              <span className="font-semibold">1,234 –∞–∫—Ç–∏–≤–Ω—ã—Ö</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderContent = () => {
    switch (activeTab) {
      case "dashboard":
        return renderDashboard();
      case "courses":
        return renderCourses();
      case "tests":
        return renderTests();
      case "users":
        return renderUsers();
      case "analytics":
        return renderAnalytics();
      default:
        return renderDashboard();
    }
  };

  if (accessDenied) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
          <div className="text-center">
            <h1 className="text-4xl font-bold text-red-600 mb-4">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
            <p className="text-xl text-gray-600 mb-8">–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</p>
            <button 
              onClick={() => router.push('/student')}
              className="bg-blue-900 text-white px-6 py-3 rounded-lg hover:bg-blue-800 transition-colors"
            >
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—É—á–µ–Ω–∏—é
            </button>
          </div>
        </div>
      </ProtectedRoute>
    );
  }

  if (!isAdmin) {
    return (
      <ProtectedRoute>
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-900"></div>
        </div>
      </ProtectedRoute>
    );
  }

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-gray-50">
        <div className="flex">
          <div className="w-64 bg-white shadow-sm border-r border-gray-200 min-h-screen">
            <div className="p-6">
              <h1 className="text-2xl font-bold text-blue-900 mb-8">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
              <nav className="space-y-2">
                {adminSections.map((section) => (
                  <button
                    key={section.id}
                    onClick={() => setActiveTab(section.id)}
                    className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-colors ${
                      activeTab === section.id
                        ? "bg-blue-100 text-blue-900"
                        : "text-gray-600 hover:bg-gray-100"
                    }`}
                  >
                    <span className="text-xl">{section.icon}</span>
                    <div>
                      <div className="font-medium">{section.title}</div>
                      <div className="text-sm text-gray-500">{section.description}</div>
                    </div>
                  </button>
                ))}
              </nav>
            </div>
          </div>
          
          <div className="flex-1 p-8">
            {renderContent()}
          </div>
        </div>
      </div>
    </ProtectedRoute>
  );
}
